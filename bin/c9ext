#!/usr/bin/env node

/**
 * Module dependencies.
 */
var program = require('commander');
var mkdirp = require('mkdirp');
var ejs = require('ejs');
var pkg = require('../package.json');
var version = pkg.version;
var fs = require('fs');

// CLI
program
  .version(version)
  .parse(process.argv);

var extTemplates = [];

// Operation defaults to "add" right now
// Should include "help" soon
var operation = program.args.shift();
// Generate extension
(function createApplication() {
    console.log("\nChoose the extension template # to create:\n");
    getTemplateChoices(__dirname + '/../templates', function(choices) {
        program.choose(choices, function(i) {
            console.log('\n\033[36mbuilding\033[0m :', extTemplates[i].name, '\n');

            extTemplates[i].prompt_vars.unshift({
                "var_name" : "extension_name",
                "var_prompt" : "Extension Name: "
            });

            promptMulti(extTemplates[i].prompt_vars, function(templateVars) {
                templateVars.extension_name = templateVars.extension_name.toLowerCase();
                var noFiles = extTemplates[i].scaffold_dirs.every(function(dirPath) {
                    dirPath = ejs.render(dirPath, templateVars);
                    return (emptyDirectorySync(dirPath) === true);
                });

                if (noFiles === true || program.force) {
                    createApplicationWith(templateVars, extTemplates[i]);
                }
                else {
                    program.confirm('one or more destination folders are not empty, continue? ', function(ok) {
                        if (ok) {
                            process.stdin.destroy();
                            createApplicationWith(templateVars, extTemplates[i]);
                        }
                        else {
                            abort('aborting');
                        }
                    });
                }
            });
        });
    });
})();

/**
 * Create application with settings from `templateVars`
 *
 * @param {Object} templateVars
 * @param {Object} extTemplate
 */
function createApplicationWith(templateVars, extTemplate) {
    console.log();
    process.on('exit', function() {
        console.log();
        console.log('   To see how to load this extension, visit:');
        console.log('     http://developer.c9.io/start/load-your-extension');
        console.log('   To learn how to build out this extension, visit the guides:');
        console.log('     http://developer.c9.io/extension-development-resources');
    });

    var scaffoldDirs = [];
    extTemplate.scaffold_dirs.forEach(function(dir) {
        scaffoldDirs.push(ejs.render(dir, templateVars));
    });

    createScaffoldingDirs(scaffoldDirs);

    var baseDir = __dirname + "/../" + extTemplate.base_dir;
    extTemplate.build_files.forEach(function(file_details) {
        var filePath = baseDir + file_details.input_file;
        var fileData = fs.readFileSync(filePath, "utf-8");
        var renderedFile = ejs.render(fileData, templateVars);

        var outputFilePath = ejs.render(file_details.output_file, templateVars);
        write(outputFilePath, renderedFile);
    });

    process.stdin.destroy();
}

/**
 * Create all the directories needed for this extension
 *
 * @param {Array} directory paths
 * @param {Function} fn
 */
function createScaffoldingDirs(dirs, fn) {
    dirs.forEach(function(dir) {
        mkdirsync(dir);
    });
}

/**
 * Get list of template choices
 *
 * @param {String} directory path
 * @param {Function} fn
 */

function getTemplateChoices(path, fn) {
    fs.readdir(path, function(err, files){
        if (err) throw err;
        files.sort();

        var arrBuilds = [];
        for (var f in files) {
            var buildFile = JSON.parse(fs.readFileSync(path + "/" + files[f] + "/build.json"));
            extTemplates.push(buildFile);
            arrBuilds.push("\033[36m" + buildFile.name + "\033[0m\n     " + buildFile.description);
        }

        fn(arrBuilds);
    });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
    fs.readdir(path, function(err, files){
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

function emptyDirectorySync(path) {
    try {
        var files = fs.readdirSync(path);
    }
    catch(e) {}
    return !files || !files.length;
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
    fs.writeFileSync(path, str);
    console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
    mkdirp(path, 0755, function(err){
        if (err) throw err;
        console.log('   \033[36mcreate\033[0m : ' + path);
        fn && fn();
    });
}

/**
 * Mkdir -p (.sync)
 *
 * @param {String} path
 */
function mkdirsync(path) {
    mkdirp.sync(path, 0755);
    console.log('   \033[36mcreate\033[0m : ' + path);
}

/**
 * Prompts the user for multiple responses
 * 
 * @param {Array} prompts
 * @param {Function} fn
 */
function promptMulti(prompts, fn) {
    var normalizedPrompts = [];
    prompts.forEach(function(item) {
        normalizedPrompts.push(item.var_prompt);
    });
    
    program.prompt(normalizedPrompts, function(obj) {
        var responseObj = {};
        var objKeys = Object.keys(obj);
        objKeys.forEach(function(i) {
            responseObj[prompts[i].var_name] = obj[i];
        });

        return fn && fn(responseObj);
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
    console.error(str);
    process.exit(1);
}